{"version":3,"sources":["components/Sentence/Button/Button.js","components/Sentence/Paragraph/Paragraph.js","components/Sentence/Sentence.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","type","className","onClick","changeOption","text","Paragraph","Fragment","variant","Sentence","state","sentences","_this","sentenceA","sentenceB","option","startInterval","sentence","letter","interval","setInterval","setState","prevState","concat","Object","toConsumableArray","length","clearInterval","time","this","_this2","Sentence_Paragraph_Paragraph","Sentence_Button_Button","React","Component","App","components_Sentence_Sentence","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAeeA,eAXA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,UAAU,MAAMC,QAASN,EAAMO,cAAgBP,EAAMQ,QCepEC,SAjBG,SAACT,GACf,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAQ,SAAA,KACKV,EAAMQ,KACHP,EAAAC,EAAAC,cAAA,KAAGE,UAAU,QAAQL,EAAMQ,MAE3BP,EAAAC,EAAAC,cAAA,KAAGE,UAAU,QAAQL,EAAMW,YC2F5BC,6MA9FXC,MAAQ,CACJC,UAAWC,EAAKf,MAAMc,UACtBE,UAAW,GACXC,UAAW,GACXC,OAAQ,KAWZC,cAAgB,WACZ,IAAIC,EAAW,EACXC,EAAS,EAEbN,EAAKO,SAAWC,YAAY,WACV,IAAXF,GACCN,EAAKS,SAAS,CACVP,UAAW,KAIH,IAAbG,EACIL,EAAKF,MAAMG,YAAc,GACxBD,EAAKS,SAAS,CACVR,UAAWD,EAAKF,MAAMC,UAAUM,GAAUC,KAG9CN,EAAKS,SAAS,SAAAC,GAAS,MAAK,CACxBT,UAAS,GAAAU,OAAAC,OAAAC,EAAA,EAAAD,CAAMF,EAAUT,WAAhB,CAA2BD,EAAKF,MAAMC,UAAUM,GAAUC,QAIxEN,EAAKF,MAAMI,YAAc,GACxBF,EAAKS,SAAS,CACVP,UAAWF,EAAKF,MAAMC,UAAUM,GAAUC,KAG9CN,EAAKS,SAAS,SAAAC,GAAS,MAAK,CACxBR,UAAS,GAAAS,OAAAC,OAAAC,EAAA,EAAAD,CAAMF,EAAUR,WAAhB,CAA2BF,EAAKF,MAAMC,UAAUM,GAAUC,SAK/EA,GAAU,KAEIN,EAAKF,MAAMC,UAAUM,GAAUS,SACzCT,GAAY,EACZC,EAAS,GAGVD,IAAaL,EAAKF,MAAMC,UAAUe,SACR,IAAtBd,EAAKF,MAAMK,OACVY,cAAcf,EAAKO,UAEnBF,EAAW,IAGpBL,EAAKf,MAAM+B,SAGlBxB,aAAe,SAACW,GACZY,cAAcf,EAAKO,UACnBP,EAAKS,SAAS,CACVR,UAAW,GACXC,UAAW,GACXC,OAAQA,GACTH,EAAKI,qGA/DRa,KAAKb,+DAILW,cAAcE,KAAKV,2CA8Dd,IAAAW,EAAAD,KACL,OACI/B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACXJ,EAAAC,EAAAC,cAAC+B,EAAD,CAAW1B,KAAMwB,KAAKnB,MAAMG,YAC5Bf,EAAAC,EAAAC,cAAC+B,EAAD,CAAW1B,KAAMwB,KAAKnB,MAAMI,YAC5BhB,EAAAC,EAAAC,cAAC+B,EAAD,CAAWvB,QAAO,qBAAAe,OAAuBM,KAAKnB,MAAMK,UACpDjB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAACgC,EAAD,CAAQ5B,aAAc,kBAAM0B,EAAK1B,aAAa,IAAIC,KAAK,cACvDP,EAAAC,EAAAC,cAACgC,EAAD,CAAQ5B,aAAc,kBAAM0B,EAAK1B,aAAa,IAAIC,KAAK,uBAnFpD4B,IAAMC,WCcdC,0LAdX,OACErC,EAAAC,EAAAC,cAACoC,EAAD,CACEzB,UAAW,CACP,qBACA,kBACA,oBACA,qBAEJiB,KAAM,aAVIM,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.20c2f5ee.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\nimport PropTypes from 'prop-types';\n\nconst Button = (props) => {\n    return(\n        <button type='button' className='btn' onClick={props.changeOption} >{props.text}</button>\n    )\n}\n\nButton.propTypes = {\n    changeOption: PropTypes.func.isRequired,\n    text: PropTypes.string.isRequired\n}\n\nexport default Button;","import React from 'react';\nimport './Paragraph.css';\nimport PropTypes from 'prop-types';\n\nconst Paragraph = (props) => {\n    return(\n        <>\n            {props.text ? (\n                <p className='text'>{props.text}</p>\n            ) : (\n                <p className='text'>{props.variant}</p>\n            )}   \n        </>\n    )\n}\n\nParagraph.propTypes = {\n    text: PropTypes.arrayOf(PropTypes.string),\n    variant: PropTypes.string\n}\n\nexport default Paragraph;","import React from 'react';\nimport './Sentence.css';\nimport PropTypes from 'prop-types';\nimport Button from './Button/Button.js';\nimport Paragraph from './Paragraph/Paragraph.js';\n\nclass Sentence extends React.Component {\n    state = {\n        sentences: this.props.sentences,\n        sentenceA: [],\n        sentenceB: [],\n        option: 1\n    }\n    \n    componentDidMount() {\n        this.startInterval();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }    \n\n    startInterval = () => {\n        let sentence = 0;\n        let letter = 0;\n\n        this.interval = setInterval(() => {\n            if(letter === 0) {\n                this.setState({\n                    sentenceB: []\n                })\n            }\n\n            if(sentence === 0) {\n                if(this.state.sentenceA === []) {\n                    this.setState({\n                        sentenceA: this.state.sentences[sentence][letter]\n                    });\n                } else {\n                    this.setState(prevState => ({\n                        sentenceA: [...prevState.sentenceA, this.state.sentences[sentence][letter]]\n                    }));\n                }\n            } else {\n                if(this.state.sentenceB === []) {\n                    this.setState({\n                        sentenceB: this.state.sentences[sentence][letter]\n                    });\n                } else {\n                    this.setState(prevState => ({\n                        sentenceB: [...prevState.sentenceB, this.state.sentences[sentence][letter]]\n                    }));\n                }\n            }\n\n            letter += 1;\n            \n            if(letter === this.state.sentences[sentence].length) {\n                sentence += 1;\n                letter = 0;\n            }\n\n            if(sentence === this.state.sentences.length) {\n                if(this.state.option === 1) {\n                    clearInterval(this.interval);\n                } else {\n                    sentence = 1;\n                }\n            }\n        }, this.props.time);\n    }\n\n    changeOption = (option) => {\n        clearInterval(this.interval);\n        this.setState({\n            sentenceA: [],\n            sentenceB: [],\n            option: option\n        }, this.startInterval());\n    };\n\n    render() {\n        return(\n            <div className='wrapper'>\n                <Paragraph text={this.state.sentenceA} />\n                <Paragraph text={this.state.sentenceB} />\n                <Paragraph variant={`Aktualny wariant: ${this.state.option}`} />\n                <div className='btn_wrapper'>\n                    <Button changeOption={() => this.changeOption(1)} text='Wariant 1' />\n                    <Button changeOption={() => this.changeOption(2)} text='Wariant 2' />\n                </div>\n            </div>\n        )\n    }\n}\n\nSentence.propTypes = {\n    sentences: PropTypes.arrayOf(PropTypes.string).isRequired,\n    time: PropTypes.number\n}\n\nexport default Sentence;","import React, { Component } from 'react';\nimport Sentence from './components/Sentence/Sentence.js'; \nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Sentence\n        sentences={[\n            'Pierwsza sentencja',\n            'Druga sentencja',\n            'Trzecia sentencja',\n            'Czwarta sentencja'\n            ]}\n        time={100}    \n        />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}